# Config based on Mozilla SSL Configuration Generator - Nginx Modern
# https://mozilla.github.io/server-side-tls/ssl-config-generator/
# Retrieved 2016-12-05

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    {% for host in nginx_virtual_hosts %}
    {% set server_list = 'serverlist' ~ loop.index %}
    {% if host.type == 'proxy' %}
    upstream {{ server_list }} {
        {% for address in host.proxy_addresses|default(['localhost:8080']) %}
        server {{ address }};
        {% endfor %}
    }
    {% endif %}

    server {
        listen 80{% if host.is_default %} default_server{% endif %};
        listen [::]:80{% if host.is_default %} default_server{% endif %};

        server_name {{ host.names|join(' ') }};

        {% if host.enable_https|default(False) %}
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2{% if host.is_default %} default_server{% endif %};
        listen [::]:443 ssl http2{% if host.is_default %} default_server{% endif %};

        ss_certificate {{ host.certificate_file }}
        ssl_certificate_key {{ host.key_file }}
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        ssl_dhparam /etc/ssl/certs/dhparam.pem;
        ssl_protocols TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_prefer_server_ciphers on;

        # Tell clients to always use HTTPS using HSTS header
        add_header Strict-Transport-Security max-age={{ 60 * 60 * 24 * 180 }};
        {% endif %}{# end HTTPS configuration #}

    {% if host.type == 'proxy' %}
    location / {
        proxy_pass {{ host.proxy_scheme|default('http') }}://{{ server_list }};
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    {% endif %}
    }
    {% endfor %}{# end virtual host configuration #}
}

